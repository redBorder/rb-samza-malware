package net.redborder.samza.aerospike;

import com.aerospike.client.*;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.listener.ExistsListener;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import net.redborder.samza.store.IStoreExtension;
import org.apache.samza.config.Config;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class AeroSpikeManager implements IStoreExtension {
    private static final Logger log = LoggerFactory.getLogger(AeroSpikeManager.class);

    AsyncClient client;
    List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    Config config;

    public AeroSpikeManager(Config config) {
        this.config = config;
        this.hosts = config.getList("systems.aerospike.servers");
        this.timeout = config.getInt("systems.aerospike.clientTimeout", 500);
        this.writePolicy = new WritePolicy();
        this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
        init();
    }

    private void init() {
        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.parseInt(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        client = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));
    }

    @Override
    public void put(String namespace, String collection, String key, List<String> columns, List<Object> values) {
        put(namespace, collection, key, columns, values, RecordExistsAction.UPDATE);
    }

    public boolean exist(String namespace, String collection, String key) {
        return client.exists(new Policy(), new Key(namespace, collection, key));
    }

    public void exist(String namespace, String collection, String key, ExistsListener existsListener) {
        client.exists(new Policy(), existsListener, new Key(namespace, collection, key));
    }

    @Override
    public Map<String, Object> get(String namespace, String collection, String key) {
        Record record = client.get(new Policy(), new Key(namespace, collection, key));
        return record.bins;
    }

    public void put(String namespace, String collection, String key, List<String> columns, List<Object> values, RecordExistsAction action) {
        Key asKey = new Key(namespace, collection, key);
        Bin[] bins = new Bin[columns.size()];

        WritePolicy policy = new WritePolicy();
        policy.recordExistsAction = action;

        for (int i = 0; i < columns.size(); i++) {
            bins[i] = new Bin(columns.get(i), values.get(i));
        }

        client.put(policy, asKey, bins);
    }

    @Override
    public void increment(String namespace, String collection, String key, List<String> columns, List<Integer> values) {
        Key asKey = new Key(namespace, collection, key);
        Operation[] operations = new Operation[columns.size()];

        WritePolicy policy = new WritePolicy();
        policy.recordExistsAction = RecordExistsAction.UPDATE;

        for (int i = 0; i < columns.size(); i++) {
            operations[i] = Operation.add(new Bin(columns.get(i), values.get(i)));
        }

        client.operate(policy, asKey, operations);
    }

    @Override
    public void decrement(String s, String s1, String s2, List<String> list, List<Integer> list1) {
    }

    @Override
    public Object getClient() {
        return client;
    }
}
