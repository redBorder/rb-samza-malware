package net.redborder.samza.aerospike;

import com.aerospike.client.AerospikeClient;
import com.aerospike.client.Bin;
import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.ClientPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import org.apache.samza.config.Config;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemProducer;

import java.util.*;

public class AerospikeSystemProducer implements SystemProducer {

    AsyncClient client;
    List<String> hosts;
    Integer timeout;
    String namespace;
    String collection;
    String keyField;
    WritePolicy writePolicy;
    List<String> columns;

    Map<Key, LinkedList<Map<String, Object>>> localCache;

    public AerospikeSystemProducer(String metadata, Config config) {
        this.hosts = config.getList("redborder.aerospike." + metadata + ".servers");
        this.timeout = config.getInt("redborder.aerospike." + metadata + ".clientTimeout", 500);
        this.namespace = config.get("redborder.aerospike." + metadata + ".namespace");
        this.collection = config.get("redborder.aerospike." + metadata + ".collection");
        this.keyField = config.get("redborder.aerospike." + metadata + ".keyField");
        this.columns = config.getList("redborder.aerospike." + metadata + ".columns");
        this.localCache = new LinkedHashMap<>();
        this.writePolicy = new WritePolicy();
        this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
    }

    @Override
    public void start() {
        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.valueOf(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        client = new AsyncClient(cPolicy, (Host[]) servers.toArray());
    }

    @Override
    public void stop() {
        client.close();
    }

    @Override
    public void register(String s) {

    }

    @Override
    public void send(String s, OutgoingMessageEnvelope messageEnvelope) {
        Map<String, Object> message = (Map<String, Object>) messageEnvelope.getMessage();
        String key = (String) message.remove(keyField);

        if (key != null) {
            Key asKey = new Key(namespace, collection, key);
            List<Bin> bins = new ArrayList<>();

            for (String colum : columns) {
                Object value = message.get(colum);
                if (value != null) {
                    bins.add(new Bin(colum, value));
                }
            }

            client.put(writePolicy, asKey, (Bin[]) bins.toArray());
        }
    }

    @Override
    public void flush(String s) {

    }
}
