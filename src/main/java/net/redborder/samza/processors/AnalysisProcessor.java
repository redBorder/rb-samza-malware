package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.listener.ExistsListener;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;

public class AnalysisProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(AnalysisProcessor.class);

    private Counter messagesCounter;

    public AnalysisProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        String namespace = (String) message.get(NAMESPACE_UUID);
        String sha256 = (String) message.get(SHA256);
        Object timestamp = message.get(TIMESTAMP);
        Map<String, Object> scores = (Map<String, Object>) message.get(SCORES);

        if (scores != null && sha256 != null) {
            Map<String, Object> toDruid = new HashMap<>();

            if(namespace != null) {
                toDruid.put(NAMESPACE_UUID, namespace);
            }

            toDruid.put(SHA256, sha256);
            toDruid.put(TIMESTAMP, timestamp);
            toDruid.putAll(scores);

            messagesCounter.inc();
            collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, toDruid));
        }
    }

    @Override
    public String getName() {
        return "analysis";
    }
}
