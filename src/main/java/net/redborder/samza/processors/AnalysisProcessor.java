package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.listener.ExistsListener;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.*;

import static net.redborder.samza.util.constants.Dimension.*;

public class AnalysisProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(AnalysisProcessor.class);

    public final static String ANALYSIS_STORE = "analysis";

    private KeyValueStore<String, Map<String, Object>> storeAnalysis;
    private Counter messagesCounter;
    private ObjectMapper mapper;

    public AnalysisProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
        this.storeAnalysis = storeManager.getStore(ANALYSIS_STORE);
        this.mapper = new ObjectMapper();
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        final Map<String, Object> toCache = new HashMap<>();
        Map<String, Object> toDruid = new HashMap<>();
        message.remove(CUCKOO_BEFORE);
        toDruid.putAll(message);

        final String sha256 = (String) message.get(SHA256);
        String namespace = (String) message.get(NAMESPACE_UUID);
        String namespace_uuid = namespace == null ? "" : namespace;
        final Integer timestamp = (Integer) message.get(TIMESTAMP);

        String malwareName = (String) message.get(MALWARE_NAME);
        Integer score = (Integer) message.get(SCORE);
        String engine = (String) message.get(ENGINE);

        if (malwareName != null)
            toCache.put(MALWARE_NAME, malwareName);

        if (score != null)
            toCache.put(SCORE, score);

        if (engine != null)
            toCache.put(ENGINE, engine);

        log.debug("CACHE:: " + sha256 + namespace_uuid + " VALUE:: " + toCache);
        storeAnalysis.put(sha256 + namespace_uuid, toCache);
        messagesCounter.inc();
        collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, toDruid));

        try {
            final String jsonCache = mapper.writeValueAsString(toCache);
            final AeroSpikeManager aerospike = (AeroSpikeManager) storeManager.getExtension("aerospike");

            if (aerospike != null) {
                aerospike.exist("test", "shaMaxMin", sha256, new ExistsListener() {
                    @Override
                    public void onSuccess(Key key, boolean exist) {
                        if (exist) {
                            aerospike.put("test", "shaMaxMin", sha256, Arrays.asList("t2", "data"), Arrays.<Object>asList(timestamp, jsonCache));
                        } else {
                            aerospike.put("test", "shaMaxMin", sha256, Arrays.asList("t1", "t2", "data"), Arrays.<Object>asList(timestamp, timestamp, jsonCache));
                        }
                    }

                    @Override
                    public void onFailure(AerospikeException e) {
                        log.error(e.getMessage(), e);
                    }
                });
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getName() {
        return "analysis";
    }
}
