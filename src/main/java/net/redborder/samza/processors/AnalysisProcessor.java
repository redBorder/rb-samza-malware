package net.redborder.samza.processors;

import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;

import java.util.HashMap;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;

public class AnalysisProcessor extends Processor<Map<String, Object>>{
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private final static String ANALYSIS_STORE = "analysis";

    private KeyValueStore<String, Map<String, Object>> storeAnalysis;
    private Counter messagesCounter;

    public AnalysisProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
        this.storeAnalysis = storeManager.getStore(ANALYSIS_STORE);
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        Map<String, Object> toCache = new HashMap<>();
        Map<String, Object> toDruid = new HashMap<>();

        String sha256 = (String) message.remove(SHA256);

        String namespace = (String) message.get(NAMESPACE_UUID);
        String namespace_uuid = namespace == null ? "" : namespace.toString();

        toCache.putAll(message);
        toDruid.putAll(toCache);
        storeAnalysis.put(sha256 + namespace_uuid, toCache);

        messagesCounter.inc();
        collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, toDruid));
    }

    @Override
    public String getName() {
        return "analysis";
    }
}
