package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.listener.ExistsListener;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;

public class AnalysisProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(AnalysisProcessor.class);

    public final static String ANALYSIS_STORE = "analysis";

    private KeyValueStore<String, Map<String, Object>> storeAnalysis;
    private Counter messagesCounter;

    public AnalysisProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
        this.storeAnalysis = storeManager.getStore(ANALYSIS_STORE);
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        final Map<String, Object> toCache = new HashMap<>();
        Map<String, Object> toDruid = new HashMap<>();
        message.remove(CUCKOO_BEFORE);
        toDruid.putAll(message);

        String namespace = (String) message.get(NAMESPACE_UUID);
        final String namespace_uuid = namespace == null ? "" : namespace;
        final String sha256 = (String) message.get(SHA256);
        final Object timestamp = message.get(TIMESTAMP);
        final String malwareName = (String) message.get(MALWARE_NAME);
        final Integer score = (Integer) message.get(SCORE);
        final String sensorName = (String) message.get(SENSOR_NAME);
        final String type = (String) message.get(TYPE);

        String engine = (String) message.get(ENGINE);

        if (malwareName != null)
            toCache.put(MALWARE_NAME, malwareName);

        if (score != null)
            toCache.put(SCORE, score);

        if (engine != null)
            toCache.put(ENGINE, engine);

        storeAnalysis.put(sha256 + namespace_uuid, toCache);
        messagesCounter.inc();

        final AeroSpikeManager aerospike = (AeroSpikeManager) storeManager.getExtension("aerospike");

        if (aerospike != null) {

            aerospike.put("malware", "analysisSha256", sha256 + namespace_uuid,
                    Arrays.asList(SHA256, SENSOR_NAME, MALWARE_NAME, SCORE, TYPE),
                    Arrays.<Object>asList(sha256, sensorName, malwareName, score, type));

            aerospike.exist("malware", "shaMaxMin", sha256 + namespace_uuid, new ExistsListener() {
                @Override
                public void onSuccess(Key key, boolean exist) {
                    if (exist) {
                        aerospike.put("malware", "shaMaxMin", sha256 + namespace_uuid,
                                Arrays.asList("t2", SHA256, SENSOR_NAME, MALWARE_NAME, SCORE, TYPE),
                                Arrays.<Object>asList(timestamp, sha256, sensorName, malwareName, score, type));
                    } else {
                        aerospike.put("malware", "shaMaxMin", sha256 + namespace_uuid,
                                Arrays.asList("t1", "t2", SHA256, SENSOR_NAME, MALWARE_NAME, SCORE, TYPE),
                                Arrays.<Object>asList(timestamp, timestamp, sha256, sensorName, malwareName, score, type));
                    }
                }

                @Override
                public void onFailure(AerospikeException e) {
                    log.error(e.getMessage(), e);
                }
            });
        }

        collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, toDruid));
    }

    @Override
    public String getName() {
        return "analysis";
    }
}
