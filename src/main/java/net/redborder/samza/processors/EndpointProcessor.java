package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.listener.ExistsListener;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;
import static net.redborder.samza.util.constants.Dimension.TYPE;

public class EndpointProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(EndpointProcessor.class);

    public final static String ANALYSIS_STORE = "analysis";
    private KeyValueStore<String, Map<String, Object>> storeAnalysis;

    private Counter messagesCounter;

    public EndpointProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
        this.storeAnalysis = storeManager.getStore(ANALYSIS_STORE);
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        String namespace = (String) message.get(NAMESPACE_UUID);
        String namespace_uuid = namespace == null ? "" : namespace;


        final AeroSpikeManager aeroSpikeManager = (AeroSpikeManager) storeManager.getExtension("aerospike");

        if (aeroSpikeManager != null) {

        }

        messagesCounter.inc();
        collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, message));
    }

    @Override
    public String getName() {
        return "ENDPOINT";
    }
}
