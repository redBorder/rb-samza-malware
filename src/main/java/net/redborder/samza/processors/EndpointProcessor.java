package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.listener.ExistsListener;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;
import static net.redborder.samza.util.constants.Dimension.TYPE;

public class EndpointProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(EndpointProcessor.class);

    private Counter messagesCounter;

    public EndpointProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        message.put(Dimension.MALWARE_NAME, "unknown");
        message.put(Dimension.SCORE, 0);

        Map<String, Object> messageEnrichmentStore = this.storeManager.enrich(message);
        String namespace = (String) message.get(NAMESPACE_UUID);
        final String namespace_uuid = namespace == null ? "" : namespace;

        messagesCounter.inc();

        String src = (String) messageEnrichmentStore.get(Dimension.SRC);
        Integer score = (Integer) messageEnrichmentStore.get(Dimension.SCORE);
        final String sha256 = (String) messageEnrichmentStore.get(Dimension.SHA256);

        final AeroSpikeManager aeroSpikeManager = (AeroSpikeManager) storeManager.getExtension("aerospike");

        if (aeroSpikeManager != null) {

            if (score == null) {
                Map<String, Object> malwareCache = aeroSpikeManager.get("malware", "analisysSha256", sha256 + namespace_uuid);
                if (malwareCache != null) {
                    messageEnrichmentStore.putAll(malwareCache);
                }
            }

            score = (Integer) messageEnrichmentStore.get(Dimension.SCORE);

            final Integer timestamp = (Integer) message.get(TIMESTAMP);
            final String malwareName = (String) message.get(MALWARE_NAME);
            final String sensorName = (String) message.get(SENSOR_NAME);
            final String type = (String) message.get(TYPE);
            final Integer scoreF = score;

            if (aeroSpikeManager != null && src != null) {

                if(score != null && score > 0) {
                    aeroSpikeManager.increment(
                            "malware",
                            "sumInfectedScoreIPS",
                            src + namespace_uuid,
                            Arrays.asList("count", "sumScore"),
                            Arrays.asList(1, score));

                    aeroSpikeManager.put(
                            "malware",
                            "sumInfectedScoreIPS",
                            src + namespace_uuid,
                            Arrays.asList(Dimension.SRC),
                            Arrays.<Object>asList(src));
                }

                aeroSpikeManager.exist("malware", "shaMaxMin", sha256 + namespace_uuid, new ExistsListener() {
                    @Override
                    public void onSuccess(Key key, boolean exist) {
                        if (exist) {
                            aeroSpikeManager.put("malware", "shaMaxMin", sha256 + namespace_uuid,
                                    Arrays.asList("t2", SHA256, SENSOR_NAME, MALWARE_NAME, SCORE, TYPE),
                                    Arrays.<Object>asList(timestamp, sha256, sensorName, malwareName, scoreF, type));
                        } else {
                            aeroSpikeManager.put("malware", "shaMaxMin", sha256 + namespace_uuid,
                                    Arrays.asList("t1", "t2", SHA256, SENSOR_NAME, MALWARE_NAME, SCORE, TYPE),
                                    Arrays.<Object>asList(timestamp, timestamp, sha256, sensorName, malwareName, scoreF, type));
                        }
                    }

                    @Override
                    public void onFailure(AerospikeException e) {
                        log.error(e.getMessage(), e);
                    }
                });
            }
        }

        collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, messageEnrichmentStore));
    }

    @Override
    public String getName() {
        return "ENDPOINT";
    }
}
