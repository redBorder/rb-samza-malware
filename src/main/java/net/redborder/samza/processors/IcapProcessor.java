package net.redborder.samza.processors;

import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.stores.AerospikeStore;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.APPLICATION_ID_NAME;

public class IcapProcessor extends Processor {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private AerospikeStore aerospike;
    private static final Logger log = LoggerFactory.getLogger(IcapProcessor.class);

    public IcapProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.aerospike = (AerospikeStore) storeManager.getExtension("aerospike");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        log.debug("{} {}",getName(), message);
        Map<String, Object> enrichment = (Map<String, Object>) message.get("enrichment");
        Map<String, Object> fileInfo = (Map<String, Object>) message.get("file_info");
        Map<String, Object> toDruid = new HashMap<>();

        Object timestamp;
        String hash = null;
        if (enrichment != null) {
            toDruid.putAll(enrichment);
        }

        if (fileInfo != null) {
            toDruid.putAll(fileInfo);
            hash = (String) fileInfo.get(Dimension.HASH);
            timestamp = fileInfo.get(Dimension.TIMESTAMP);
        } else {
            timestamp = System.currentTimeMillis() / 1000L;
            toDruid.put(Dimension.TIMESTAMP, timestamp);
        }

        Map<String, Object> icapRequest = (Map<String, Object>) message.get("icap_request_headers");

        if (icapRequest != null) {
            String url = (String) icapRequest.get("url_file");
            String dst = (String) icapRequest.get("X-Client-IP");
            String proxy_ip = (String) icapRequest.get("client-ip");

            if (url != null) {
                toDruid.put(Dimension.URL, url);
            }

            if (dst != null) {
                toDruid.put(Dimension.DST, dst);
            }

            if (proxy_ip != null) {
                toDruid.put(Dimension.PROXY_IP, proxy_ip);
            }
        }

        Map<String, Object> httpRequest = (Map<String, Object>) message.get("http_request_headers");

        if (httpRequest != null) {
            String src = (String) httpRequest.get("host");
            String userAgent = (String) httpRequest.get("user-agent");

            if (src != null) {
                toDruid.put(Dimension.SRC, src);
            }

            if (userAgent != null) {
                toDruid.put(Dimension.HTTP_USER_AGENT_OS, userAgent);
            }
        }

        toDruid.put(Dimension.TYPE, "icap");
        toDruid.put(Dimension.SENSOR_NAME, "ICAP");
        toDruid.put(Dimension.SENSOR_UUID,"ICAP");

        if(hash != null) {
            aerospike.updateHashTimes(timestamp, hash, Constants.EventType.hash);
        }

        Map<String, Object> hashMessage = aerospike.enrichHashScores(toDruid);
        Map<String, Object> urlMessage = aerospike.enrichUrlScores(hashMessage);
        Map<String, Object> ipMessage = aerospike.enrichIpScores(urlMessage);

        ipMessage.put(APPLICATION_ID_NAME, "http");

        collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, ipMessage));
    }

    @Override
    public String getName() {
        return "ICAP";
    }
}
