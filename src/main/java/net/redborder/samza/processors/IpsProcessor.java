package net.redborder.samza.processors;

import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.NAMESPACE_UUID;

public class IpsProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(IpsProcessor.class);

    private Counter messagesCounter;

    public IpsProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        message.put(Dimension.MALWARE_NAME, "unknown");
        Map<String, Object> messageEnrichmentStore = this.storeManager.enrich(message);
        String namespace = (String) message.get(NAMESPACE_UUID);
        String namespace_uuid = namespace == null ? "" : namespace;

        if (messageEnrichmentStore.containsKey(Dimension.SHA256)) {
            messagesCounter.inc();
            collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, messageEnrichmentStore));

            String src = (String) messageEnrichmentStore.get(Dimension.SRC);
            Integer score = (Integer) messageEnrichmentStore.get(Dimension.SCORE);
            String sha256 = (String) messageEnrichmentStore.get(Dimension.SHA256);

            AeroSpikeManager aeroSpikeManager = (AeroSpikeManager) storeManager.getExtension("aerospike");

            if (aeroSpikeManager != null) {

                if (score == null) {
                    Map<String, Object> malwareCache = aeroSpikeManager.get("test", "analisysSha256", sha256 + namespace_uuid);
                    if (malwareCache != null) {
                        messageEnrichmentStore.putAll(malwareCache);
                    }
                }

                score = (Integer) messageEnrichmentStore.get(Dimension.SCORE);

                if (aeroSpikeManager != null && src != null && score != null && score > 0) {
                    aeroSpikeManager.increment(
                            "test",
                            "sumInfectedScoreIPS",
                            src + namespace_uuid,
                            Arrays.asList("count", "sumScore"),
                            Arrays.asList(1, score));

                    aeroSpikeManager.put(
                            "test",
                            "sumInfectedScoreIPS",
                            src + namespace_uuid,
                            Arrays.asList(Dimension.SRC),
                            Arrays.<Object>asList(src));
                }
            }
        }
    }

    @Override
    public String getName() {
        return "IPS";
    }
}
