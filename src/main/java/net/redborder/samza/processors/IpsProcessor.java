package net.redborder.samza.processors;

import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.stores.AerospikeStore;
import net.redborder.samza.util.Utils;
import net.redborder.samza.util.constants.Constants;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;

public class IpsProcessor extends Processor {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(IpsProcessor.class);

    private Counter messagesCounter;
    private AerospikeStore aerospike;
    private List<String> dimensions = Arrays.asList(TIMESTAMP, SRC, DST,
            SENSOR_NAME, SENSOR_ID, CLIENT_MAC);

    public IpsProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
        this.aerospike = (AerospikeStore) storeManager.getExtension("aerospike");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        if (message.containsKey(SHA256)) {
            Map<String, Object> toDruid = new HashMap<>();

            Object timestamp = message.get(TIMESTAMP);
            String hash = (String) message.get(SHA256);
            toDruid.put(HASH, hash);
            toDruid.put(TIMESTAMP, timestamp);
            toDruid.put(TYPE, "ips");

            String fileHostname = (String) message.get(FILE_HOSTNAME);
            String fileUri = (String) message.get(FILE_URI);

            if(fileHostname != null && fileUri != null) {
                String url = "http://" + fileHostname + fileUri;
                toDruid.put(URL, url);
                aerospike.updateHashTimes(timestamp, url, Constants.EventType.url);
            }

            for(String dimension : dimensions){
                Object value = message.get(dimension);

                if (value != null) {
                    toDruid.put(dimension, value);
                }
            }

            Integer fileSize = (Integer) message.get(FILE_SIZE);

            if(fileSize != null){
                toDruid.put(FILE_SIZE, Utils.size2Range(fileSize));
            }

            if(message.containsKey(FILE_HOSTNAME)){
                toDruid.put(APPLICATION_ID_NAME, "http");
            }else if(message.containsKey(EMAIL_SENDER)){
                toDruid.put(APPLICATION_ID_NAME, "smtp");
            }else if(message.containsKey("ftp_user")){
                toDruid.put(APPLICATION_ID_NAME, "ftp");
                toDruid.put("client_id", message.get("ftp_user"));
            }else if(message.containsKey("smb_uid")){
                toDruid.put(APPLICATION_ID_NAME, "smb");
                toDruid.put("client_id", message.get("smb_uid"));
            }

            aerospike.updateHashTimes(timestamp, hash, Constants.EventType.hash);
            Map<String, Object> hashMessage = aerospike.enrichHashScores(toDruid);
            Map<String, Object> urlMessage = aerospike.enrichUrlScores(hashMessage);
            Map<String, Object> ipMessage = aerospike.enrichIpScores(urlMessage);

            collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, ipMessage));
            messagesCounter.inc();
        }
    }

    @Override
    public String getName() {
        return "IPS";
    }
}
