package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.listener.ExistsListener;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;

import java.util.Arrays;
import java.util.Map;

public class IpsProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final SystemStream AS_STREAM = new SystemStream("aerospike", "files-clients-ips");

    private Counter messagesCounter;

    public IpsProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        message.put(Dimension.MALWARE_NAME, "unknown");
        Map<String, Object> messageEnrichmentStore = this.storeManager.enrich(message);
        if (messageEnrichmentStore.containsKey(Dimension.SHA256)) {
            messagesCounter.inc();
            collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, messageEnrichmentStore));
            collector.send(new OutgoingMessageEnvelope(AS_STREAM, null, messageEnrichmentStore));

            String src = (String) message.get(Dimension.SRC);
            Integer score = (Integer) message.get(Dimension.SCORE);

            AeroSpikeManager aeroSpikeManager = (AeroSpikeManager) storeManager.getExtension("aerospike");

            if (aeroSpikeManager != null && src != null && score != null && score > 0) {
                aeroSpikeManager.increment(
                        "test",
                        "sumInfectedScoreIPS",
                        src,
                        Arrays.asList("count", "sumScore"),
                        Arrays.asList(1, score));
            }
        }
    }

    @Override
    public String getName() {
        return "IPS";
    }
}
