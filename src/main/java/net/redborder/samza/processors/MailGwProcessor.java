package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.listener.ExistsListener;
import com.google.common.base.Joiner;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;
import static net.redborder.samza.util.constants.Dimension.TYPE;

public class MailGwProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(MailGwProcessor.class);

    private Counter messagesCounter;

    public MailGwProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        message.put(Dimension.MALWARE_NAME, "unknown");
        message.put(Dimension.SCORE, 0);

        String emailsSenders = (String) message.remove(Dimension.EMAIL_SENDERS);
        String[] emailSenders = emailsSenders.split(",");
        String emailsDestinations = (String) message.remove(Dimension.EMAIL_DESTINATIONS);
        String[] emailDestinations = emailsDestinations.split(",");

        String urls = (String) message.remove(Dimension.URLS);
        String namespace = (String) message.get(NAMESPACE_UUID);
        final String namespace_uuid = namespace == null ? "" : namespace;

        if (urls != null) {
            message.put(Dimension.URLS, urls);
        }

        final AeroSpikeManager aeroSpikeManager = (AeroSpikeManager) storeManager.getExtension("aerospike");

        if (aeroSpikeManager != null) {

        }

        for (String emailSender : emailSenders) {
            message.put(Dimension.EMAIL_SENDER, emailSender);
            for (String emailDest : emailDestinations) {
                message.put(Dimension.EMAIL_DESTINATION, emailDest);
                messagesCounter.inc();

            }

            collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, message));
        }
    }

    @Override
    public String getName() {
        return "mail-gw";
    }
}
