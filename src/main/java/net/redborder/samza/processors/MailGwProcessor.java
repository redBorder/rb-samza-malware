package net.redborder.samza.processors;

import com.aerospike.client.AerospikeException;
import com.aerospike.client.Key;
import com.aerospike.client.listener.ExistsListener;
import com.google.common.base.Joiner;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.*;
import static net.redborder.samza.util.constants.Dimension.TYPE;

public class MailGwProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(MailGwProcessor.class);

    private Counter messagesCounter;

    public MailGwProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        message.put(Dimension.MALWARE_NAME, "unknown");
        message.put(Dimension.SCORE, 0);

        Map<String, Object> messageEnrichmentStore = this.storeManager.enrich(message);

        String emailsSenders = (String) messageEnrichmentStore.remove(Dimension.EMAIL_SENDERS);
        String[] emailSenders = emailsSenders.split(",");
        String emailsDestinations = (String) messageEnrichmentStore.remove(Dimension.EMAIL_DESTINATIONS);
        String[] emailDestinations = emailsDestinations.split(",");
        String urls = (String) messageEnrichmentStore.remove(Dimension.URLS);
        String namespace = (String) message.get(NAMESPACE_UUID);
        final String namespace_uuid = namespace == null ? "" : namespace;

        if (urls != null) {
            messageEnrichmentStore.put(Dimension.URLS, urls);
        }

        for (String emailSender : emailSenders) {
            messageEnrichmentStore.put(Dimension.EMAIL_SENDER, emailSender);
            for (String emailDest : emailDestinations) {
                messageEnrichmentStore.put(Dimension.EMAIL_DESTINATION, emailDest);
                messagesCounter.inc();

                final String sha256 = (String) messageEnrichmentStore.get(Dimension.SHA256);

                final AeroSpikeManager aeroSpikeManager = (AeroSpikeManager) storeManager.getExtension("aerospike");

                if (aeroSpikeManager != null) {

                    if (message.get(Dimension.MALWARE_NAME).equals("unknown")) {
                        Map<String, Object> malwareCache = aeroSpikeManager.get("malware", "analisysSha256", sha256 + namespace_uuid);
                        if (malwareCache != null) {
                            messageEnrichmentStore.putAll(malwareCache);
                        }
                    }

                    final Integer timestamp = (Integer) messageEnrichmentStore.get(TIMESTAMP);
                    final String malwareName = (String) messageEnrichmentStore.get(MALWARE_NAME);
                    final String sensorName = (String) messageEnrichmentStore.get(SENSOR_NAME);
                    final String type = (String) messageEnrichmentStore.get(TYPE);
                    final String src = (String) messageEnrichmentStore.get(SRC);

                    final Integer score = (Integer) messageEnrichmentStore.get(Dimension.SCORE);

                    if (aeroSpikeManager != null && emailSender != null) {

                        if(score > 0) {
                            aeroSpikeManager.increment(
                                    "malware",
                                    "sumInfectedScoreMailGW",
                                    emailSender + namespace_uuid,
                                    Arrays.asList("count", "sumScore"),
                                    Arrays.asList(1, score));

                            aeroSpikeManager.put(
                                    "malware",
                                    "sumInfectedScoreMailGW",
                                    emailSender + namespace_uuid,
                                    Arrays.asList(Dimension.EMAIL_SENDER),
                                    Arrays.<Object>asList(emailSender));

                            aeroSpikeManager.increment(
                                    "malware",
                                    "sumInfectedScoreIPS",
                                    src + namespace_uuid,
                                    Arrays.asList("count", "sumScore"),
                                    Arrays.asList(1, score));

                            aeroSpikeManager.put(
                                    "malware",
                                    "sumInfectedScoreIPS",
                                    src + namespace_uuid,
                                    Arrays.asList(Dimension.SRC),
                                    Arrays.<Object>asList(src));
                        }

                        aeroSpikeManager.exist("malware", "shaMaxMin", sha256 + namespace_uuid, new ExistsListener() {
                            @Override
                            public void onSuccess(Key key, boolean exist) {
                                if (exist) {
                                    aeroSpikeManager.put("malware", "shaMaxMin", sha256 + namespace_uuid,
                                            Arrays.asList("t2", SHA256, SENSOR_NAME, MALWARE_NAME, SCORE, TYPE),
                                            Arrays.<Object>asList(timestamp, sha256, sensorName, malwareName, score, type));
                                } else {
                                    aeroSpikeManager.put("malware", "shaMaxMin", sha256 + namespace_uuid,
                                            Arrays.asList("t1", "t2", SHA256, SENSOR_NAME, MALWARE_NAME, SCORE, TYPE),
                                            Arrays.<Object>asList(timestamp, timestamp, sha256, sensorName, malwareName, score, type));
                                }
                            }

                            @Override
                            public void onFailure(AerospikeException e) {
                                log.error(e.getMessage(), e);
                            }
                        });
                    }
                }

                collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, messageEnrichmentStore));
            }
        }
    }

    @Override
    public String getName() {
        return "mail-gw";
    }
}
