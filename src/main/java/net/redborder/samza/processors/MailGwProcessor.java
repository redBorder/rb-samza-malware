package net.redborder.samza.processors;

import com.google.common.base.Joiner;
import net.redborder.samza.aerospike.AeroSpikeManager;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static net.redborder.samza.util.constants.Dimension.NAMESPACE_UUID;

public class MailGwProcessor extends Processor<Map<String, Object>> {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);

    private Counter messagesCounter;

    public MailGwProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        message.put(Dimension.MALWARE_NAME, "unknown");
        Map<String, Object> messageEnrichmentStore = this.storeManager.enrich(message);

        List<String> emailSenders = (List<String>) messageEnrichmentStore.remove(Dimension.EMAIL_SENDERS);
        List<String> emailDestinations = (List<String>) messageEnrichmentStore.remove(Dimension.EMAIL_DESTINATIONS);
        List<String> urls = (List<String>) messageEnrichmentStore.remove(Dimension.URLS);
        String namespace = (String) message.get(NAMESPACE_UUID);
        String namespace_uuid = namespace == null ? "" : namespace;

        if (!urls.isEmpty()) {
            messageEnrichmentStore.put(Dimension.URLS, Joiner.on(",").join(urls));
        }

        for (String emailSender : emailSenders) {
            messageEnrichmentStore.put(Dimension.EMAIL_SENDER, emailSender);
            for (String emailDest : emailDestinations) {
                messageEnrichmentStore.put(Dimension.EMAIL_DESTINATION, emailDest);
                messagesCounter.inc();

                String sha256 = (String) messageEnrichmentStore.get(Dimension.SHA256);
                Integer score = (Integer) messageEnrichmentStore.get(Dimension.SCORE);

                AeroSpikeManager aeroSpikeManager = (AeroSpikeManager) storeManager.getExtension("aerospike");

                if (aeroSpikeManager != null) {

                    if (score == null) {
                        Map<String, Object> malwareCache = aeroSpikeManager.get("malware", "analisysSha256", sha256 + namespace_uuid);
                        if (malwareCache != null) {
                            messageEnrichmentStore.putAll(malwareCache);
                        }
                    }

                    score = (Integer) messageEnrichmentStore.get(Dimension.SCORE);

                    if (aeroSpikeManager != null && emailSender != null && score != null && score > 0) {
                        aeroSpikeManager.increment(
                                "malware",
                                "sumInfectedScoreMailGW",
                                emailSender + namespace_uuid,
                                Arrays.asList("count", "sumScore"),
                                Arrays.asList(1, score));

                        aeroSpikeManager.put(
                                "malware",
                                "sumInfectedScoreMailGW",
                                emailSender + namespace_uuid,
                                Arrays.asList(Dimension.EMAIL_SENDER),
                                Arrays.<Object>asList(emailSender));
                    }
                }

                collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, null, messageEnrichmentStore));
            }
        }
    }

    @Override
    public String getName() {
        return "mail-gw";
    }
}
