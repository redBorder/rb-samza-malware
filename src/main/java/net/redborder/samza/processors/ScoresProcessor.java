package net.redborder.samza.processors;

import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreExtension;
import net.redborder.samza.store.StoreExtensionKey;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.metrics.Counter;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.system.SystemStream;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.TaskContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

public class ScoresProcessor extends Processor {
    private static final SystemStream OUTPUT_STREAM = new SystemStream("kafka", Constants.ENRICHMENT_MALWARE_OUTPUT_TOPIC);
    private static final Logger log = LoggerFactory.getLogger(ScoresProcessor.class);

    private Counter messagesCounter;
    private StoreExtension storeExtension;

    public ScoresProcessor(StoreManager storeManager, EnrichManager enrichManager, Config config, TaskContext context) {
        super(storeManager, enrichManager, config, context);
        this.messagesCounter = context.getMetricsRegistry().newCounter(getClass().getName(), "messages");
        this.storeExtension = storeManager.getExtension("aerospike");
    }

    @Override
    public void process(Map<String, Object> message, MessageCollector collector) {
        StoreExtensionKey extensionKey = new StoreExtensionKey.Builder()
                .namespace("malware")
                .collection("hashScores")
                .key((String) message.get(Dimension.SHA256))
                .build();

        storeExtension.putOnLocalStore(extensionKey, message);
        collector.send(new OutgoingMessageEnvelope(OUTPUT_STREAM, message));
        messagesCounter.inc();
    }

    @Override
    public String getName() {
        return "ANALYSIS";
    }
}
