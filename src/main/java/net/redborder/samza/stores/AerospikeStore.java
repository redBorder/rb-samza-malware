package net.redborder.samza.stores;

import com.aerospike.client.*;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import com.aerospike.client.query.IndexType;
import net.redborder.samza.store.StoreExtension;
import net.redborder.samza.store.StoreExtensionKey;
import net.redborder.samza.store.TransformProcess;
import net.redborder.samza.util.HttpHelper;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.storage.kv.KeyValueStore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class AerospikeStore extends StoreExtension<AsyncClient> {
    private static final Logger log = LoggerFactory.getLogger(AerospikeStore.class);

    AsyncClient client;
    List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    String REPUTATION_URL_FORMAT = "http://%s/reputation/v1/malware/%s";
    List<String> reputationServers;
    Random r;

    public AerospikeStore(String name, Config config, TransformProcess transformProcess, KeyValueStore<String, Map<String, Object>> localStore) {
        super(name, config, transformProcess, localStore);
        hosts = config.getList("redborder.stores.extension.aerospike.servers");
        timeout = config.getInt("redborder.stores.extension.aerospike.clientTimeout", 500);
        writePolicy = new WritePolicy();
        writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
        reputationServers = config.getList("redborder.reputation.servers", Arrays.asList("127.0.0.1:7777"));
        r = new Random();

        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.parseInt(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        client = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));
        client.createIndex(null, "malware", "hashScores", "index_hash_score", "score", IndexType.NUMERIC);
        client.createIndex(null, "malware", "hashScores", "index_hash_list", "list_type", IndexType.STRING);
        client.createIndex(null, "malware", "urlScores", "index_url_score", "score", IndexType.NUMERIC);
        client.createIndex(null, "malware", "urlScores", "index_url_list", "list_type", IndexType.STRING);
        client.createIndex(null, "malware", "ipScores", "index_ip_score", "score", IndexType.NUMERIC);
        client.createIndex(null, "malware", "ipScores", "index_ip_list", "list_type", IndexType.STRING);
        client.createIndex(null, "malware", "controlFiles", "index_hash_controlFiles", "hash", IndexType.STRING);

    }

    @Override
    public Map<String, Object> get(String namespace, String collection, String key) {
        Record record = client.get(new Policy(), new Key(namespace, collection, key));

        Map<String, Object> result = new HashMap<>();

        if (record != null) {
            result.putAll(record.bins);
        }

        return result;
    }

    @Override
    public Boolean exist(String namespace, String collection, String key) {
        return client.exists(new Policy(), new Key(namespace, collection, key));
    }

    @Override
    public void put(String namespace, String collection, String key, Set<String> columns, Collection<Object> values) {
        List<String> columnsList = new ArrayList<>();
        columnsList.addAll(columns);

        List<Object> valueList = new ArrayList<>();
        valueList.addAll(values);

        Key asKey = new Key(namespace, collection, key);
        Bin[] bins = new Bin[columnsList.size()];

        WritePolicy policy = new WritePolicy();
        policy.recordExistsAction = RecordExistsAction.UPDATE;

        for (int i = 0; i < columns.size(); i++) {
            bins[i] = new Bin(columnsList.get(i), valueList.get(i));
        }

        client.put(policy, asKey, bins);
    }

    @Override
    public void remove(String namespace, String collection, String key) {
        Key asKey = new Key(namespace, collection, key);
        client.delete(new WritePolicy(), asKey);
    }

    @Override
    public void increment(String namespace, String collection, String key, Set<String> columns, Collection<Integer> values) {
        List<String> columnsList = new ArrayList<>();
        columnsList.addAll(columns);

        List<Object> valueList = new ArrayList<>();
        valueList.addAll(values);

        Key asKey = new Key(namespace, collection, key);
        Operation[] operations = new Operation[columnsList.size()];

        WritePolicy policy = new WritePolicy();
        policy.recordExistsAction = RecordExistsAction.UPDATE;

        for (int i = 0; i < columnsList.size(); i++) {
            operations[i] = Operation.add(new Bin(columnsList.get(i), valueList.get(i)));
        }

        client.operate(policy, asKey, operations);
    }

    @Override
    public void decrement(String s, String s1, String s2, Set<String> set, Collection<Integer> collection) {
        log.warn("The decrement method is not implemented!");
    }

    @Override
    public AsyncClient getClient() {
        return client;
    }

    public void updateHashTimes(Object timestamp, String hash) {
        if (hash != null) {
            StoreExtensionKey hashTimesKey = new StoreExtensionKey.Builder()
                    .namespace("malware")
                    .collection("hashTimes")
                    .key(hash)
                    .build();

            Map<String, Object> hashTimes = new HashMap<>();
            hashTimes.put("hash", hash);

            if (exist(hashTimesKey)) {
                hashTimes.put("time_end", timestamp);
            } else {
                hashTimes.put("time_start", timestamp);
                hashTimes.put("time_end", timestamp);
            }

            put(hashTimesKey, hashTimes);
        }
    }

    public Map<String, Object> enrichIpScores(Map<String, Object> message) {
        Map<String, Object> data = new HashMap<>();
        data.putAll(message);

        String src = (String) message.get("src");
        String dst = (String) message.get("dst");

        StoreExtensionKey srcKey = new StoreExtensionKey.Builder().namespace("malware").collection("ipScores").key(src)
                .build();
        StoreExtensionKey dstKey = new StoreExtensionKey.Builder().namespace("malware").collection("ipScores").key(dst)
                .build();

        if (src != null && dst != null) {

            Map<String, Object> dataSrc = get(srcKey);
            Map<String, Object> dataDst = get(dstKey);

            Integer scoreSrc;
            Integer scoreDst;

            if (!dataSrc.isEmpty()) {
                scoreSrc = (Integer) dataSrc.remove(Dimension.SCORE);
                String listTypeSrc = (String) dataSrc.get(Dimension.LIST_TYPE);
                data.putAll(dataSrc);

                if (listTypeSrc != null) {
                    if (listTypeSrc.equals("black")) {
                        scoreSrc = 100;
                    } else if (listTypeSrc.equals("white")) {
                        scoreSrc = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeSrc);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }
            } else {
                scoreSrc = -1;

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", src);

                HttpHelper.post(makeRandomReputationURL(), params);
            }


            if (!dataDst.isEmpty()) {
                scoreDst = (Integer) dataDst.remove(Dimension.SCORE);
                String listTypeDst = (String) dataDst.get(Dimension.LIST_TYPE);
                data.putAll(dataDst);

                if (listTypeDst != null) {
                    if (listTypeDst.equals("black")) {
                        scoreDst = 100;
                    } else if (listTypeDst.equals("white")) {
                        scoreDst = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeDst);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }
            } else {
                scoreDst = -1;

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", dst);

                HttpHelper.post(makeRandomReputationURL(), params);
            }

            if (scoreSrc > 0 && scoreDst > 0) {
                data.put(Dimension.IP_DIRECTION, "both");

                if (scoreSrc > scoreDst) {
                    data.put("ip_" + Dimension.SCORE, scoreSrc);
                } else {
                    data.put("ip_" + Dimension.SCORE, scoreDst);
                }

            } else if (scoreSrc > 0) {
                data.put(Dimension.IP_DIRECTION, "source");
                data.put("ip_" + Dimension.SCORE, scoreSrc);
            } else if (scoreDst > 0) {
                data.put(Dimension.IP_DIRECTION, "destination");
                data.put("ip_" + Dimension.SCORE, scoreDst);
            } else {
                data.put(Dimension.IP_DIRECTION, "none");
                data.put("ip_" + Dimension.SCORE, -1);
            }

        } else if (src != null) {
            Map<String, Object> dataSrc = get(srcKey);

            if (!dataSrc.isEmpty()) {
                Integer scoreSrc = (Integer) dataSrc.remove(Dimension.SCORE);
                String listTypeSrc = (String) dataSrc.get(Dimension.LIST_TYPE);

                if (listTypeSrc != null) {
                    if (listTypeSrc.equals("black")) {
                        scoreSrc = 100;
                    } else if (listTypeSrc.equals("white")) {
                        scoreSrc = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeSrc);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                data.putAll(dataSrc);

                if (scoreSrc > 0) {
                    data.put(Dimension.IP_DIRECTION, "source");
                    data.put("ip_" + Dimension.SCORE, scoreSrc);
                } else {
                    data.put(Dimension.IP_DIRECTION, "none");
                    data.put("ip_" + Dimension.SCORE, "unknown");
                }
            } else {
                data.put(Dimension.IP_DIRECTION, "none");
                data.put("ip_" + Dimension.SCORE, "unknown");

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", src);

                HttpHelper.post(makeRandomReputationURL(), params);
            }

            Map<String, Object> params = new HashMap<>();
            params.put("http","asynchronous");
            params.put("process", "complete");
            params.put("ip", dst);

            HttpHelper.post(makeRandomReputationURL(), params);

        } else if (dst != null) {
            Map<String, Object> dataDst = get(dstKey);

            if (!dataDst.isEmpty()) {

                Integer scoreDst = (Integer) dataDst.remove(Dimension.SCORE);
                String listTypeSrc = (String) dataDst.get(Dimension.LIST_TYPE);

                if (listTypeSrc != null) {
                    if (listTypeSrc.equals("black")) {
                        scoreDst = 100;
                    } else if (listTypeSrc.equals("white")) {
                        scoreDst = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeSrc);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                data.putAll(dataDst);

                if (scoreDst > 0) {
                    data.put(Dimension.IP_DIRECTION, "destination");
                    data.put("ip_" + Dimension.SCORE, scoreDst);
                } else {
                    data.put(Dimension.IP_DIRECTION, "none");
                    data.put("ip_" + Dimension.SCORE, "unknown");
                }
            } else {
                data.put(Dimension.IP_DIRECTION, "none");
                data.put("ip_" + Dimension.SCORE, "unknown");

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", dst);

                HttpHelper.post(makeRandomReputationURL(), params);
            }
        }

        return data;
    }

    public Map<String, Object> enrichHashScores(Map<String, Object> message) {
        Map<String, Object> data = new HashMap<>();
        data.putAll(message);
        String hash = (String) message.get("hash");

        if (hash != null) {
            StoreExtensionKey hashKey = new StoreExtensionKey.Builder()
                    .namespace("malware")
                    .collection("hashScores")
                    .key(hash)
                    .build();

            Map<String, Object> dataHash = get(hashKey);

            if (!dataHash.isEmpty()) {
                String listType = (String) dataHash.get(Dimension.LIST_TYPE);
                Integer score = (Integer) dataHash.remove(Dimension.SCORE);

                if (listType != null) {
                    if (listType.equals("black")) {
                        score = 100;
                    } else if (listType.equals("white")) {
                        score = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listType);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                data.put("hash_" + Dimension.SCORE, score);
                data.put(Dimension.LIST_TYPE, listType);
            } else {
                data.put("hash_" + Dimension.SCORE, "unknown");
                data.put(Dimension.LIST_TYPE, "none");

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", hash);

                HttpHelper.post(makeRandomReputationURL(), params);
            }
        }

        return data;
    }

    public Map<String, Object> enrichUrlScores(Map<String, Object> message) {
        Map<String, Object> data = new HashMap<>();
        data.putAll(message);
        String url = (String) message.get("url");

        if (url != null) {
            StoreExtensionKey urlKey = new StoreExtensionKey.Builder()
                    .namespace("malware")
                    .collection("urlScores")
                    .key(url)
                    .build();

            Map<String, Object> urlHash = get(urlKey);

            if (!urlHash.isEmpty()) {
                String listType = (String) urlHash.get(Dimension.LIST_TYPE);
                Integer score = (Integer) urlHash.get(Dimension.URL);

                if (listType != null) {
                    if (listType.equals("black")) {
                        score = 100;
                    } else if (listType.equals("white")) {
                        score = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listType);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                data.put("url_" + Dimension.SCORE, score);
            } else {
                data.put("url_" + Dimension.SCORE, "unknown");
                data.put(Dimension.LIST_TYPE, "none");

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", url);

                HttpHelper.post(makeRandomReputationURL(), params);
            }
        }

        return data;

    }

    public String makeRandomReputationURL(){
        return String.format(REPUTATION_URL_FORMAT, reputationServers.get(r.nextInt(reputationServers.size() - 1)), "query");
    }
}
