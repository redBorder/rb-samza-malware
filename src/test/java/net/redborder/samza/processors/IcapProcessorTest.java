package net.redborder.samza.processors;

import junit.framework.TestCase;

import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreExtensionKey;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.stores.AerospikeStore;
import net.redborder.samza.util.MockMessageCollector;
import net.redborder.samza.util.MockTaskContext;
import org.apache.samza.config.Config;
import org.apache.samza.task.TaskContext;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class IcapProcessorTest extends TestCase{

    static Map<String, Object> database;

    static IcapProcessor icapProcessor;
    static EnrichManager enrichManager;

    @Mock
    static Config config;

    @Mock
    static StoreManager storeManager;

    @Mock
    static AerospikeStore mockAerospikeStore;
    static TaskContext taskContext;


    @BeforeClass
    public static void initTest() {

        database = new HashMap<>();

        taskContext = new MockTaskContext();

        config = mock(Config.class);
        storeManager = mock(StoreManager.class);
        mockAerospikeStore = mock(AerospikeStore.class);

        // Mock AerospikeStore
        when(storeManager.getExtension("aerospike")).thenReturn(mockAerospikeStore);

        // Return petition (Will throw exception)
        when(mockAerospikeStore.makeRandomReputationURL()).thenReturn("http://localhost:7777/reputation/v1/malware/query");

        // Real call to enrichHashScores method
        when(mockAerospikeStore.enrichHashScores(anyMap())).thenCallRealMethod();

        // Real call to enrichHashScores method
        when(mockAerospikeStore.enrichUrlScores(anyMap())).thenCallRealMethod();

        // Real call to enrichHashScores method
        when(mockAerospikeStore.enrichIpScores(anyMap())).thenCallRealMethod();

        when(mockAerospikeStore.get(any(StoreExtensionKey.class))).thenAnswer(new Answer<Object>() {
            @Override
            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {

                StoreExtensionKey sek = (StoreExtensionKey) invocationOnMock.getArguments()[0];
                String key = sek.key;

                Map<String, Object> returnMap = new HashMap<String, Object>();


                if(key.equals("AAAA")){
                    returnMap.put("list_type", "white");
                    returnMap.put("hash", key);
                }else if (key.equals("BBBB")){
                    returnMap.put("list_type", "black");
                    returnMap.put("hash", key);
                }else if(key.equals("CCCC")){
                    returnMap.put("hash", key);
                }

                return returnMap;
            }
        });

        enrichManager = new EnrichManager();

        icapProcessor = new IcapProcessor(storeManager, enrichManager, config, taskContext);

    }

    @Test
    public void enrichUnknowHashCorrectly(){

        MockMessageCollector collector = new MockMessageCollector();

        Map<String, Object> file_info = new HashMap<>();

        file_info.put("timestamp",new Date(0L).getTime());
        file_info.put("hash","CCCC");
        file_info.put("file_size","471");

        Map<String, Object> icap_request_headered = new HashMap<>();

        icap_request_headered.put("url_file","http://some.url.test.com");
        icap_request_headered.put("client-ip", "10.10.10.10");
        icap_request_headered.put("Host","10.0.150.23:1123");
        icap_request_headered.put("Date","Thu, 17 Mar 2016 16:59:24 GMT");
        icap_request_headered.put("Encapsulated","req-hdr=0, res-hdr=475, res-body=792");
        icap_request_headered.put("Preview","471");
        icap_request_headered.put("Allow","204");
        icap_request_headered.put("X-Client-IP","10.0.0.10");

        Map<String, Object> http_request_headers = new HashMap<>();

        http_request_headers.put("post","http://some.url.com/ HTTP/1.1");
        http_request_headers.put("host","some.url.com");
        http_request_headers.put("user-agent","some-user Agent");
        http_request_headers.put("accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        http_request_headers.put("accept-language","es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3");
        http_request_headers.put("accept-encoding","gzip, deflate");
        http_request_headers.put("content-length","83");
        http_request_headers.put("content-type","application/some-content-type");
        http_request_headers.put("via","ICAP/1.0 rbqwl1wkjb1k.redborder.cluster (C-ICAP/trunk-exported Send info and file service )");

        Map<String, Object> message = new HashMap<>();
        message.put("file_info",file_info);
        message.put("icap_request_headered",icap_request_headered);
        message.put("http_request_headers",http_request_headers);


        Map<String, Object> expectedMessage = new HashMap<>();

        expectedMessage.putAll(file_info);
        expectedMessage.put("url","http://some.url.test.com");
        expectedMessage.put("dst","10.0.0.10");
        expectedMessage.put("proxy_ip","10.10.10.10");
        expectedMessage.put("src","some.url.com");
        expectedMessage.put("http_user_agent_os","some-user Agent");
        expectedMessage.put("type","icap");
        expectedMessage.put("sensor_name","ICAP");
        expectedMessage.put("sensor_uuid","ICAP");
        expectedMessage.put("application_id_name","http");
        expectedMessage.put("ip_score",-1);
        expectedMessage.put("hash_list_type","none");
        expectedMessage.put("hash_score",-1);
        expectedMessage.put("url_score",-1);
        expectedMessage.put("ip_direction","none");
        expectedMessage.put("list_type","none");

        icapProcessor.process(message, collector);

        assertEquals(expectedMessage, collector.getResult().get(0));
    }



}