package net.redborder.samza.processors;

import junit.framework.TestCase;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.testing.MockMessageCollector;
import net.redborder.samza.util.testing.MockTaskContext;
import org.apache.samza.config.Config;
import org.apache.samza.task.TaskContext;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;

import static net.redborder.samza.util.constants.Dimension.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class IpsProcessorTest extends TestCase {
    static AnalysisProcessor analysisProcessor;
    static IpsProcessor ipsProcessor;
    static EnrichManager enrichManager;

    @Mock
    static StoreManager storeManager;

    @Mock
    static Config config;

    static TaskContext context;
    static List<String> stores = new ArrayList<>();

    @BeforeClass
    public static void initTest() throws IOException {
        Properties properties = new Properties();
        InputStream inputStream = new FileInputStream("src/main/config/malware.properties");
        properties.load(inputStream);

        context = new MockTaskContext();

        config = mock(Config.class);
        when(config.getList("redborder.stores", Collections.<String>emptyList())).thenReturn(stores);

        String storesListAsString = properties.getProperty("redborder.stores");
        for (String store : storesListAsString.split(",")) {
            String storeKey = properties.getProperty("redborder.store." + store + ".key");
            String storeOverwriteStr = properties.getProperty("redborder.store." + store + ".overwrite");
            boolean storeOverwrite = (storeOverwriteStr == null || storeOverwriteStr == "true");

            when(config.get("redborder.store." + store + ".key", SHA256)).thenReturn(storeKey);
            when(config.getBoolean("redborder.store." + store + ".overwrite", true)).thenReturn(storeOverwrite);
            stores.add(store);
        }

        storeManager = new StoreManager(config, context, NAMESPACE_UUID, SHA256);
        enrichManager = new EnrichManager();
        analysisProcessor = new AnalysisProcessor(storeManager, enrichManager, config, context);
        ipsProcessor = new IpsProcessor(storeManager, enrichManager, config, context);
    }


    @Test
    public void checkAnalysisCacheStorage() {
        MockMessageCollector ipsCollector = new MockMessageCollector();
        Map<String, Object> ipsMessage = new HashMap<>();
        String sha256 = "XYZ";
        String namespaceUuid = "12345";
        ipsMessage.put(NAMESPACE_UUID, namespaceUuid);
        ipsMessage.put(SHA256, sha256);
        ipsMessage.put(TIMESTAMP, Long.valueOf(1429088471L));
        ipsMessage.put(SRC, "10.0.150.20");
        ipsMessage.put(DST, "10.0.200.35");
        ipsMessage.put(FILE_SIZE, 128);
        ipsMessage.put(FILE_URI, "http://badfile.net");
        ipsMessage.put(FILE_HOSTNAME, "75.75.75.75");
        ipsMessage.put(SENSOR_NAME, "ips-up");
        ipsMessage.put(TYPE, "IPS");
        ipsProcessor.process(ipsMessage, ipsCollector);

        assertEquals(ipsMessage, ipsCollector.getResult().get(0));

        //Feed the analysisCache
        MockMessageCollector analysisCollector = new MockMessageCollector();
        Map<String, Object> analysisMessage = new HashMap<>();
        analysisMessage.put(NAMESPACE_UUID, namespaceUuid);
        analysisMessage.put(SHA256, sha256);
        analysisMessage.put(TIMESTAMP, Integer.valueOf(1429088499));
        analysisMessage.put(MALWARE_NAME, "Trojan4x");
        analysisMessage.put(ENGINE, "ClamAV");
        analysisMessage.put(SCORE, 90);
        analysisProcessor.process(analysisMessage, analysisCollector);
        ipsProcessor.process(ipsMessage, ipsCollector);

        Map<String, Object> result = new HashMap<>();
        result.putAll(ipsMessage);
        result.put(MALWARE_NAME, "Trojan4x");
        result.put(ENGINE, "ClamAV");
        result.put(SCORE, 90);

        assertEquals(result, ipsCollector.getResult().get(0));

        ipsMessage.put(NAMESPACE_UUID, "other_id");
        ipsProcessor.process(ipsMessage, ipsCollector);

        assertEquals(ipsMessage, ipsCollector.getResult().get(0));
    }

    @Test
    public void getNameTest() {
        assertEquals("IPS", ipsProcessor.getName());
    }
}
