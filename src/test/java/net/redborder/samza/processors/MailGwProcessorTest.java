package net.redborder.samza.processors;

import com.google.common.base.Joiner;
import junit.framework.TestCase;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.util.testing.MockMessageCollector;
import net.redborder.samza.util.testing.MockTaskContext;
import org.apache.samza.config.Config;
import org.apache.samza.task.TaskContext;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;

import static net.redborder.samza.util.constants.Dimension.*;
import static net.redborder.samza.util.constants.Dimension.SCORE;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class MailGwProcessorTest extends TestCase {
    static AnalysisProcessor analysisProcessor;
    static MailGwProcessor mailGwProcessor;
    static EnrichManager enrichManager;

    @Mock
    static StoreManager storeManager;

    @Mock
    static Config config;

    static TaskContext context;
    static List<String> stores = new ArrayList<>();

    @BeforeClass
    public static void initTest() throws IOException {
        Properties properties = new Properties();
        InputStream inputStream = new FileInputStream("src/main/config/malware.properties");
        properties.load(inputStream);

        context = new MockTaskContext();

        config = mock(Config.class);
        when(config.getList("redborder.stores", Collections.<String>emptyList())).thenReturn(stores);

        String storesListAsString = properties.getProperty("redborder.stores");
        for (String store : storesListAsString.split(",")) {
            String storeKey = properties.getProperty("redborder.store." + store + ".key");
            String storeOverwriteStr = properties.getProperty("redborder.store." + store + ".overwrite");
            boolean storeOverwrite = (storeOverwriteStr == null || storeOverwriteStr == "true");

            when(config.get("redborder.store." + store + ".key", SHA256)).thenReturn(storeKey);
            when(config.getBoolean("redborder.store." + store + ".overwrite", true)).thenReturn(storeOverwrite);
            stores.add(store);
        }

        storeManager = new StoreManager(config, context, NAMESPACE_UUID, SHA256);
        enrichManager = new EnrichManager();
        analysisProcessor = new AnalysisProcessor(storeManager, enrichManager, config, context);
        mailGwProcessor = new MailGwProcessor(storeManager, enrichManager, config, context);
    }

    @Test
    public void checkBaseProcess() {
        MockMessageCollector mGwCollector = new MockMessageCollector();
        Map<String, Object> mGwMessage = new HashMap<>();
        String sha256 = "ZZZ";
        String namespaceUuid = "12345";
        mGwMessage.put(NAMESPACE_UUID, namespaceUuid);
        mGwMessage.put(SHA256, sha256);
        mGwMessage.put(TIMESTAMP, Integer.valueOf(1429088471));

        String destinations = "agomez@redborder.net,agomez@redborder.net";
        String urls = "http://badfile.net,http://virus.net";

        mGwMessage.put(EMAIL_SENDERS, "malware@redborder.net");
        mGwMessage.put(EMAIL_DESTINATIONS, destinations);
        mGwMessage.put(URLS, urls);
        mGwMessage.put(FILENAME, "file.exe");
        mGwMessage.put(EMAIL_ID, "28412");
        mGwMessage.put(SENSOR_NAME, "mail-sensor-001");
        mGwMessage.put(TYPE, "mailgateway");

        mailGwProcessor.process(mGwMessage, mGwCollector);

        Map<String, Object> result = new HashMap<>();
        result.put(FILENAME, "file.exe");
        result.put(EMAIL_ID, "28412");
        result.put(URLS, urls);
        result.put(EMAIL_SENDER, "malware@redborder.net");
        result.put(NAMESPACE_UUID, namespaceUuid);
        result.put(SHA256, sha256);
        result.put(TIMESTAMP, Integer.valueOf(1429088471));
        result.put(SENSOR_NAME, "mail-sensor-001");
        result.put(TYPE, "mailgateway");
        result.put(MALWARE_NAME, "unknown");

        List<Map<String, Object>> results = mGwCollector.getResult();

        String[] iteratorDst = destinations.split(",");
        Iterator iteratorRst = results.iterator();

       for(String iter : iteratorDst){
            result.put(EMAIL_DESTINATION, iter);
            assertEquals(result, iteratorRst.next());
        }
    }


    @Test
    public void checkCorrectEnrichment() {
        String sha256 = "XYZ";
        String namespaceUuid = "12345";

        //Feed the analysisCache
        MockMessageCollector analysisCollector = new MockMessageCollector();
        Map<String, Object> analysisMessage = new HashMap<>();
        analysisMessage.put(NAMESPACE_UUID, namespaceUuid);
        analysisMessage.put(SHA256, sha256);
        analysisMessage.put(TIMESTAMP, Integer.valueOf(1429088499));
        analysisMessage.put(MALWARE_NAME, "Trojan4x");
        analysisMessage.put(ENGINE, "ClamAV");
        analysisMessage.put(SCORE, 90);
        analysisProcessor.process(analysisMessage, analysisCollector);

        MockMessageCollector mGwCollector = new MockMessageCollector();
        Map<String, Object> mGwMessage = new HashMap<>();
        mGwMessage.put(NAMESPACE_UUID, namespaceUuid);
        mGwMessage.put(SHA256, sha256);
        mGwMessage.put(TIMESTAMP, Integer.valueOf(1429088471));

        String destinations = "agomez@redborder.net,agomez@redborder.net";
        String urls = "http://badfile.net,http://virus.net";

        mGwMessage.put(EMAIL_SENDERS, "malware@redborder.net");
        mGwMessage.put(EMAIL_DESTINATIONS, destinations);
        mGwMessage.put(URLS, urls);
        mGwMessage.put(FILENAME, "file.exe");
        mGwMessage.put(EMAIL_ID, "28412");
        mGwMessage.put(SENSOR_NAME, "mail-sensor-001");
        mGwMessage.put(TYPE, "mailgateway");

        mailGwProcessor.process(mGwMessage, mGwCollector);

        Map<String, Object> result = new HashMap<>();
        result.put(FILENAME, "file.exe");
        result.put(EMAIL_ID, "28412");
        result.put(URLS, urls);
        result.put(EMAIL_SENDER, "malware@redborder.net");
        result.put(NAMESPACE_UUID, namespaceUuid);
        result.put(SHA256, sha256);
        result.put(TIMESTAMP, Integer.valueOf(1429088471));
        result.put(SENSOR_NAME, "mail-sensor-001");
        result.put(TYPE, "mailgateway");
        result.put(MALWARE_NAME, "Trojan4x");
        result.put(ENGINE, "ClamAV");
        result.put(SCORE, 90);

        List<Map<String, Object>> results = mGwCollector.getResult();

        String [] iteratorDst = destinations.split(",");
        Iterator iteratorRst = results.iterator();

        for(String iter : iteratorDst) {
            result.put(EMAIL_DESTINATION, iter);
            assertEquals(result, iteratorRst.next());
        }
    }

    @Test
    public void checkNotEnrichmentOtherNamespace() {
        String sha256 = "XYZ";
        String namespaceUuid = "12345";

        //Feed the analysisCache
        MockMessageCollector analysisCollector = new MockMessageCollector();
        Map<String, Object> analysisMessage = new HashMap<>();
        analysisMessage.put(NAMESPACE_UUID, namespaceUuid);
        analysisMessage.put(SHA256, sha256);
        analysisMessage.put(TIMESTAMP, Integer.valueOf(1429088499));
        analysisMessage.put(MALWARE_NAME, "Trojan4x");
        analysisMessage.put(ENGINE, "ClamAV");
        analysisMessage.put(SCORE, 90);
        analysisProcessor.process(analysisMessage, analysisCollector);

        MockMessageCollector mGwCollector = new MockMessageCollector();
        Map<String, Object> mGwMessage = new HashMap<>();
        mGwMessage.put(NAMESPACE_UUID, "other_namespace");
        mGwMessage.put(SHA256, sha256);
        mGwMessage.put(TIMESTAMP, Integer.valueOf(1429088471));

        String destinations = "agomez@redborder.net,agomez@redborder.net";
        String urls = "http://badfile.net,http://virus.net";

        mGwMessage.put(EMAIL_SENDERS, "malware@redborder.net");
        mGwMessage.put(EMAIL_DESTINATIONS, destinations);
        mGwMessage.put(URLS, urls);
        mGwMessage.put(FILENAME, "file.exe");
        mGwMessage.put(EMAIL_ID, "28412");
        mGwMessage.put(SENSOR_NAME, "mail-sensor-001");
        mGwMessage.put(TYPE, "mailgateway");

        mailGwProcessor.process(mGwMessage, mGwCollector);

        Map<String, Object> result = new HashMap<>();
        result.put(FILENAME, "file.exe");
        result.put(EMAIL_ID, "28412");
        result.put(URLS, urls);
        result.put(EMAIL_SENDER, "malware@redborder.net");
        result.put(NAMESPACE_UUID, "other_namespace");
        result.put(SHA256, sha256);
        result.put(TIMESTAMP, Integer.valueOf(1429088471));
        result.put(SENSOR_NAME, "mail-sensor-001");
        result.put(TYPE, "mailgateway");
        result.put(MALWARE_NAME, "unknown");

        List<Map<String, Object>> results = mGwCollector.getResult();

        String [] iteratorDst = destinations.split(",");
        Iterator iteratorRst = results.iterator();

        for(String iter : iteratorDst) {
            result.put(EMAIL_DESTINATION, iter);
            assertEquals(result, iteratorRst.next());
        }
    }

    @Test
    public void getNameTest() {
        assertEquals("mail-gw", mailGwProcessor.getName());
    }
}
