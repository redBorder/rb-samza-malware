package net.redborder.samza.processors;

import junit.framework.TestCase;
import net.redborder.samza.enrichments.EnrichManager;
import net.redborder.samza.store.StoreManager;
import net.redborder.samza.stores.AerospikeStore;
import net.redborder.samza.util.MockKeyValueStore;
import net.redborder.samza.util.MockMessageCollector;
import net.redborder.samza.util.MockTaskContext;
import org.apache.samza.config.Config;
import org.apache.samza.task.TaskContext;
import org.codehaus.jackson.map.ObjectMapper;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.Matchers.anyMap;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ScoresProcessorTest extends TestCase {

    static MockKeyValueStore storeScores;

    ObjectMapper mapper = new ObjectMapper();

    static ScoresProcessor scoresProcessor;
    static EnrichManager enrichManager;

    @Mock
    static Config config;

    @Mock
    static StoreManager storeManager;

    @Mock
    static AerospikeStore mockAerospikeStore;

    static TaskContext taskContext;

    @BeforeClass
    public static void initTest(){
        storeScores = new MockKeyValueStore();
        taskContext = new MockTaskContext();
        enrichManager = new EnrichManager();

        config = mock(Config.class);
        storeManager = mock(StoreManager.class);
        mockAerospikeStore = mock(AerospikeStore.class);

        when(storeManager.getExtension("aerospike")).thenReturn(mockAerospikeStore);

        scoresProcessor = new ScoresProcessor(storeManager, enrichManager, config, taskContext);
    }

    @Before
    public void cleanStore(){
        storeScores.flush();
    }

    @Test
    public void processEmptyMsg(){
        MockMessageCollector collector = new MockMessageCollector();
        Map<String, Object> message = new HashMap<>();

        scoresProcessor.process(message, collector);

        assertTrue(collector.getResult().isEmpty());
    }
}
