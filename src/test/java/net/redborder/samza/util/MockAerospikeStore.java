package net.redborder.samza.util;

import com.aerospike.client.async.AsyncClient;
import net.redborder.samza.store.StoreExtension;
import net.redborder.samza.store.StoreExtensionKey;
import net.redborder.samza.store.TransformProcess;
import net.redborder.samza.util.constants.Constants;
import net.redborder.samza.util.constants.Dimension;
import org.apache.samza.config.Config;
import org.apache.samza.storage.kv.KeyValueStore;

import java.util.*;

public class MockAerospikeStore {

    Map<String, Map<String, Map<String, Object>>> set = new HashMap<>();
    List<String> reputationServers;
    String REPUTATION_URL_FORMAT = "http://%s/reputation/v1/malware/%s";
    Random r;


    public MockAerospikeStore(){

        set.put("malware", new HashMap<String, Map<String, Object>>());

        set.get("malware").put("hashScores", new HashMap<String, Object>());
        set.get("malware").put("urlScores", new HashMap<String, Object>());
        set.get("malware").put("ipScores", new HashMap<String, Object>());
        set.get("malware").put("controlFiles", new HashMap<String, Object>());

        reputationServers = new ArrayList<>();
        r = new Random();
    }

    public Map<String, Object> get(StoreExtensionKey key){
        return get(key.namespace, key.collection, key.key);

    }

    public Map<String, Object> get(String namespace, String collection, String key){
        return (Map<String, Object>) set.get(namespace).get(collection).get(key);
    }

    public Boolean exist(StoreExtensionKey key){
       return  exist(key.namespace, key.collection, key.key);
    }

    public Boolean exist(String namespace, String collection, String key){
        return set.get(namespace).get(collection).containsKey(key);
    }

    public void put(StoreExtensionKey key, Map<String, Object> data){
        put(key.namespace, key.collection, key.key, data.keySet(), data.values());
    }

    public void put(String namespace, String collection, String key, Set<String> columns, Collection<Object> values){
        Map<String, Object> record = new HashMap<>();

        record.keySet().addAll(columns);
        record.values().addAll(values);

        set.get(namespace).get(collection).put(key, record);
    }

    public void remove(String namespace, String collection, String key){
        set.get(namespace).get(collection).remove(key);
    }

    public void increment(String namespace, String collection, String key, Set<String> columns, Collection<Integer> values) {
        Map<String, Object> record = new HashMap<>();

        record.keySet().addAll(columns);
        record.values().addAll(values);

        set.get(namespace).get(collection).put(key, record);
    }

    public void decrement(String s, String s1, String s2, Set<String> set, Collection<Integer> collection){
        // Not implemented yet
    }

    public AsyncClient getClient() {
        return null;
    }

    public void updateHashTimes(Object timestamp, String data, Constants.EventType type) {
        if (data != null) {
            StoreExtensionKey hashTimesKey = new StoreExtensionKey.Builder()
                    .namespace("malware")
                    .collection(type.name() + "Times")
                    .key(data)
                    .build();

            Map<String, Object> dataTimes = new HashMap<>();
            dataTimes.put(type.name(), data);

            if (exist(hashTimesKey)) {
                dataTimes.put("time_end", timestamp);
            } else {
                dataTimes.put("time_start", timestamp);
                dataTimes.put("time_end", timestamp);
            }

            put(hashTimesKey, dataTimes);
        }
    }

    public Map<String, Object> enrichIpScores(Map<String, Object> message) {
        Map<String, Object> data = new HashMap<>();
        data.putAll(message);

        String src = (String) message.get("src");
        String dst = (String) message.get("dst");

        StoreExtensionKey srcKey = new StoreExtensionKey.Builder().namespace("malware").collection("ipScores").key(src)
                .build();
        StoreExtensionKey dstKey = new StoreExtensionKey.Builder().namespace("malware").collection("ipScores").key(dst)
                .build();

        if (src != null && dst != null) {

            Map<String, Object> dataSrc = get(srcKey);
            Map<String, Object> dataDst = get(dstKey);

            Integer scoreSrc;
            Integer scoreDst;

            if (!dataSrc.isEmpty()) {
                scoreSrc = (Integer) dataSrc.remove(Dimension.SCORE);
                String listTypeSrc = (String) dataSrc.get(Dimension.LIST_TYPE);
                data.putAll(dataSrc);

                if (listTypeSrc != null) {
                    if (listTypeSrc.equals("black")) {
                        scoreSrc = 100;
                    } else if (listTypeSrc.equals("white")) {
                        scoreSrc = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeSrc);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }
            } else {
                scoreSrc = -1;

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", src);

                HttpHelper.post(makeRandomReputationURL(), params);
            }


            if (!dataDst.isEmpty()) {
                scoreDst = (Integer) dataDst.remove(Dimension.SCORE);
                String listTypeDst = (String) dataDst.get(Dimension.LIST_TYPE);
                data.putAll(dataDst);

                if (listTypeDst != null) {
                    if (listTypeDst.equals("black")) {
                        scoreDst = 100;
                    } else if (listTypeDst.equals("white")) {
                        scoreDst = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeDst);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }
            } else {
                scoreDst = -1;

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", dst);

                HttpHelper.post(makeRandomReputationURL(), params);
            }

            if(scoreSrc == null){
                scoreSrc = -1;
            }

            if(scoreDst == null){
                scoreDst = -1;
            }

            if (scoreSrc > 0 && scoreDst > 0) {
                data.put(Dimension.IP_DIRECTION, "both");

                if (scoreSrc > scoreDst) {
                    data.put("ip_" + Dimension.SCORE, scoreSrc);
                } else {
                    data.put("ip_" + Dimension.SCORE, scoreDst);
                }
            } else if (scoreSrc > 0) {
                data.put(Dimension.IP_DIRECTION, "source");
                data.put("ip_" + Dimension.SCORE, scoreSrc);
            } else if (scoreDst > 0) {
                data.put(Dimension.IP_DIRECTION, "destination");
                data.put("ip_" + Dimension.SCORE, scoreDst);
            } else {
                data.put(Dimension.IP_DIRECTION, "none");
                data.put("ip_" + Dimension.SCORE, -1);
            }

        } else if (src != null) {
            Map<String, Object> dataSrc = get(srcKey);

            if (!dataSrc.isEmpty()) {
                Integer scoreSrc = (Integer) dataSrc.remove(Dimension.SCORE);
                String listTypeSrc = (String) dataSrc.get(Dimension.LIST_TYPE);

                if (listTypeSrc != null) {
                    if (listTypeSrc.equals("black")) {
                        scoreSrc = 100;
                    } else if (listTypeSrc.equals("white")) {
                        scoreSrc = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeSrc);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                if(scoreSrc == null){
                    scoreSrc = -1;
                }

                data.putAll(dataSrc);

                if (scoreSrc > 0) {
                    data.put(Dimension.IP_DIRECTION, "source");
                    data.put("ip_" + Dimension.SCORE, scoreSrc);
                } else {
                    data.put(Dimension.IP_DIRECTION, "none");
                    data.put("ip_" + Dimension.SCORE, -1);
                }
            } else {
                data.put(Dimension.IP_DIRECTION, "none");
                data.put("ip_" + Dimension.SCORE, -1);

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", src);

                HttpHelper.post(makeRandomReputationURL(), params);
            }

            Map<String, Object> params = new HashMap<>();
            params.put("http","asynchronous");
            params.put("process", "complete");
            params.put("ip", dst);

            HttpHelper.post(makeRandomReputationURL(), params);

        } else if (dst != null) {
            Map<String, Object> dataDst = get(dstKey);

            if (!dataDst.isEmpty()) {

                Integer scoreDst = (Integer) dataDst.remove(Dimension.SCORE);
                String listTypeSrc = (String) dataDst.get(Dimension.LIST_TYPE);

                if (listTypeSrc != null) {
                    if (listTypeSrc.equals("black")) {
                        scoreDst = 100;
                    } else if (listTypeSrc.equals("white")) {
                        scoreDst = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listTypeSrc);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                if(scoreDst == null){
                    scoreDst = -1;
                }

                data.putAll(dataDst);

                if (scoreDst > 0) {
                    data.put(Dimension.IP_DIRECTION, "destination");
                    data.put("ip_" + Dimension.SCORE, scoreDst);
                } else {
                    data.put(Dimension.IP_DIRECTION, "none");
                    data.put("ip_" + Dimension.SCORE, -1);
                }
            } else {
                data.put(Dimension.IP_DIRECTION, "none");
                data.put("ip_" + Dimension.SCORE, -1);

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", dst);

                HttpHelper.post(makeRandomReputationURL(), params);
            }
        }

        return data;
    }

    public Map<String, Object> enrichHashScores(Map<String, Object> message) {
        Map<String, Object> data = new HashMap<>();
        data.putAll(message);
        String hash = (String) message.get("hash");

        if (hash != null) {
            StoreExtensionKey hashKey = new StoreExtensionKey.Builder()
                    .namespace("malware")
                    .collection("hashScores")
                    .key(hash)
                    .build();

            Map<String, Object> dataHash = get(hashKey);

            if (!dataHash.isEmpty()) {
                String listType = (String) dataHash.get(Dimension.LIST_TYPE);
                Integer score = (Integer) dataHash.remove(Dimension.SCORE);

                if (listType != null) {
                    if (listType.equals("black")) {
                        score = 100;
                    } else if (listType.equals("white")) {
                        score = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listType);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                if(score == null){
                    score = -1;
                }

                data.put("hash_" + Dimension.SCORE, score);
                data.put(Dimension.LIST_TYPE, listType);
            } else {
                data.put("hash_" + Dimension.SCORE, -1);
                data.put(Dimension.LIST_TYPE, "none");

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", hash);

                HttpHelper.post(makeRandomReputationURL(), params);
            }
        }

        return data;
    }

    public Map<String, Object> enrichUrlScores(Map<String, Object> message) {
        Map<String, Object> data = new HashMap<>();
        data.putAll(message);
        String url = (String) message.get("url");

        if (url != null) {
            StoreExtensionKey urlKey = new StoreExtensionKey.Builder()
                    .namespace("malware")
                    .collection("urlScores")
                    .key(url)
                    .build();

            Map<String, Object> urlHash = get(urlKey);

            if (!urlHash.isEmpty()) {
                String listType = (String) urlHash.get(Dimension.LIST_TYPE);
                Integer score = (Integer) urlHash.get(Dimension.URL);

                if (listType != null) {
                    if (listType.equals("black")) {
                        score = 100;
                    } else if (listType.equals("white")) {
                        score = 0;
                    }
                    data.put(Dimension.LIST_TYPE, listType);
                } else {
                    data.put(Dimension.LIST_TYPE, "none");
                }

                if(score == null){
                    score = -1;
                }

                data.put("url_" + Dimension.SCORE, score);
            } else {
                data.put("url_" + Dimension.SCORE, -1);
                data.put(Dimension.LIST_TYPE, "none");

                // Lazy petition
                Map<String, Object> params = new HashMap<>();
                params.put("http", "asynchronous");
                params.put("process", "complete");
                params.put("hash", url);

                HttpHelper.post(makeRandomReputationURL(), params);
            }
        }

        return data;

    }

    public String makeRandomReputationURL(){
        Integer random;
        if(reputationServers.size() <= 1){
            random = 0;
        } else {
            random = r.nextInt(reputationServers.size() - 1);
        }

        return String.format(REPUTATION_URL_FORMAT, reputationServers.get(random), "query");
    }


}
